@page
@model IndexModel
@{
    ViewData["Title"] = "首页";
}


<div>
    <div class="jumbotron" style="background-color:lightcyan">
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <div class="jumbotron-content">
                        <br />
                        <p style="text-align:center;font-weight:600;font-size:42px">HslCommunication</p>
                        <p class="summary" style="text-align:center">
                            一个流行的设备采集，程序通讯，跨平台的组件框架
                        </p>
                        <div style="text-align:center">
                            <a class="btn btn-lg btn-success" href="https://github.com/dathlin/HslCommunication/raw/master/Download/HslCommunicationDemo.zip"
                               target="_blank" style="margin-right:10px;">
                                <span class="glyphicon glyphicon-download-alt" aria-hidden="true"></span>&nbsp; Download
                            </a>
                            <a class="btn btn-lg btn-primary" href="https://github.com/dathlin/HslCommunication" target="_blank">
                                <span class="glyphicon glyphicon-tags" aria-hidden="true"></span>&nbsp; Source code
                            </a>
                        </div>
                        <br />
                        <h5 style="text-align:center">
                            Version: <img src="https://img.shields.io/nuget/v/HslCommunication.svg" />
                            &nbsp;-&nbsp;
                            <a href="http://www.cnblogs.com/dathlin/" class="twitter-share-button">cnblogs</a>
                        </h5>
                    </div>
                </div>
                <div class="col-md-6">
                    <div id="carousel-example-generic" class="carousel slide" data-ride="carousel">
                        <ol class="carousel-indicators">
                            <li data-target="#carousel-example-generic" data-slide-to="0" class="active"></li>
                            <li data-target="#carousel-example-generic" data-slide-to="1"></li>
                            <li data-target="#carousel-example-generic" data-slide-to="2"></li>
                        </ol>

                        <!-- Wrapper for slides -->
                        <div class="carousel-inner" role="listbox">
                            <div class="item active" style="background-color:whitesmoke">
                                <pre name="code" class="brush: csharp">
// 三菱PLC通讯，指定PLC的ip地址和端口号
var melsecMc = new MelsecMcNet("192.168.1.110",6000 );
// 连接对象
OperateResult connect = melsecMc.ConnectServer( );
if (!connect.IsSuccess)
{
    Console.WriteLine( "connect failed:" + connect.Message );
    return;
}
// 举例读取D100的值
short D100 = melsecMc.ReadInt16( "D100" ).Content;

melsecMc.ConnectClose( );
</pre>
                            </div>
                            <div class="item" style="background-color:whitesmoke">
                                <pre>
// 西门子PLC通讯，指定PLC的ip地址和端口号
var siemens = new SiemensS7Net(SiemensPLCS.S1200,"192.168.1.110");
// 连接对象
OperateResult connect = siemens.ConnectServer( );
if (!connect.IsSuccess)
{
    Console.WriteLine( "connect failed:" + connect.Message );
    return;
}
// 举例读取M100的值
short M100 = siemens.ReadInt16( "M100" ).Content;

siemens.ConnectClose( );
</pre>
                            </div>
                            <div class="item" style="background-color:whitesmoke">
                                <pre>
// 欧姆龙PLC通讯，指定PLC的ip地址和端口号
var omronFinsNet = new OmronFinsNet("192.168.1.110", 6000);
omronFinsNet.SA1 = 10;
omronFinsNet.DA1 = 110;
// 连接对象
OperateResult connect = omronFinsNet.ConnectServer( );
if (!connect.IsSuccess){
    Console.WriteLine( "connect failed:" + connect.Message );
    return;
}
// 举例读取D100的值
short D100 = omronFinsNet.ReadInt16( "D100" ).Content;
omronFinsNet.ConnectClose( );
</pre>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@await Component.InvokeAsync( "Division", new { description = "HSL 介绍" } )
<div class="container">
    <div class="row">
        <div class="col-md-4">
            <span style="font-size:28px">什么是 <strong>HSL</strong>?</span>
            <p>
                这是一个基于工业物联网，计算机通讯的架构实现，集成了工业软件开发的大部分的基础功能实现，比如三菱PLC通讯，西门子PLC通讯，欧姆龙PLC通讯，modbus通讯，
                这些通讯全部进行了多语言的实现，当然，主打的 .net 库的功能集成还更加的强大，除此之外，还实现了跨程序，跨语言，跨平台的通讯，
                让你不再纠结于使用windows还是 linux系统，实现了日志功能，流水号生成功能，邮件发送功能，傅立叶变换功能，等等，
                将来会集成更多的工业环境常见功能的实现。
                <br />
                <br />
                为了不让工业4.0只停留在口号上，万丈高楼平地起，而基石就是HSL。
            </p>
        </div>
        <div class="col-md-4">
            <span style="font-size:28px"><strong>HSL</strong>能干什么？</span>
            <p>
                HSL能将工业生产现场的设备进行万物互联，将数据在底层自由的传输，无论是主动的还是被动的，无论你的采集系统是什么（通常采集系统为windows电脑，
                或是嵌入式系统，或是基于linux的盒子）， 都可以实现数据的随意传输，方便快速实现强大，实时，高响应的健壮系统，无论您是构建C/S系统，
                还是B/S系统，还是C-B-S-A（集成桌面客户端，浏览器，安卓）混合系统，都是快速而且低成本的实现， 只要拥有了工业现场的一手数据，
                即可以搭建强大的实时监视功能的软件，生产报表及自动化排产的软件，各种工艺参数历史追踪的软件，基于数据经验的机器学习软件，以及全功能的mes系统等等。
                关于mes系统，详细的demo可以参照菜单界面的<strong>Mes Demo</strong>
            </p>
        </div>
        <div class="col-md-4">
            <span style="font-size:28px">关于合作</span>
            <p>
                顺便聊聊 ，传统的工业模式都是采购现成的工业软件，包括上位机软件及MES系统，而忽视了自身的研发能力。
                对于一些行业标准的功能软件来说，比如ERP系统，财务软件，这些可以直接采购即可， 但是对于上位机及MES系统而言，
                各个企业的实际需求千差万别，难以有通用的场景，而目前的现状都是花大钱办小事，所以在此处，给出一条面向未来的模式实现：
                对于生产企业而言， 基于HSL开发企业级MES系统实现，作为数据的核心仓库中心，及业务逻辑处理中心；对于设备供应商而言，
                基于HSL开发上位机软件系统，快速且方便的将数据分发至客户的MES系统，进行协同工作。
                <br />
                欢迎企业客户联系合作，包括开发新的协议支持，培训及指导上位机软件及MES系统的开发，指导工厂智能化升级改造及信息化团队建设。
            </p>
        </div>
    </div>
</div>

<br />
@await Component.InvokeAsync( "Division", new { description = "HSL 出品" } )

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/demo/demo.png" alt="Demo">
                <div class="caption" style="text-align:center">
                    <h4><a href="https://github.com/dathlin/HslCommunication/raw/master/Download/HslCommunicationDemo.zip">HslCommunication Demo</a></h4>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/demo/control.png" alt="control">
                <div class="caption" style="text-align:center">
                    <h4><a href="https://github.com/dathlin/HslControlsDemo">HslControls Demo</a></h4>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/demo/Capture.png" alt="remote">
                <div class="caption" style="text-align:center">
                    <h4><a href="">HslFramework Capture</a></h4>
                </div>
            </div>
        </div>
    </div>
</div>

<br />
@await Component.InvokeAsync( "Division", new { description = "Multi-platform Support" } )

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/DotNet.png" alt="DotNet">
                <div class="caption" style="text-align:center">
                    <h4><a href="#">.Net</a></h4>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/Java.png" alt="Java">
                <div class="caption" style="text-align:center">
                    <h4><a href="#">Java</a></h4>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/Python.png" alt="Python">
                <div class="caption" style="text-align:center">
                    <h4><a href="#">Python</a></h4>
                </div>
            </div>
        </div>
    </div>
</div>

<br />
@await Component.InvokeAsync( "Division", new { description = "OpcUaHelper 介绍" } )
<div class="container">
    <div class="row">
        <div class="col-md-12">这是一个基于<strong>HslCommunication</strong>组件创建的SDK包，源代码地址：<a href="https://github.com/dathlin/SharpNodeSettings">https://github.com/dathlin/SharpNodeSettings</a>，主要功能实现可配置的，可视化的设备连接信息，设备数据解析规则操作。包含以下三种示例模式</div>
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/demo/opcserver.png" alt="Server">
                <div class="caption" style="text-align:center">
                    <h4><a href="https://github.com/dathlin/OpcUaHelper" target="_blank">Server 项目</a></h4>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/demo/opcclient.png" alt="Client">
                <div class="caption" style="text-align:center">
                    <h4><a href="https://github.com/dathlin/OpcUaHelper" target="_blank">Client 项目</a></h4>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/demo/opccore.png" alt="Core">
                <div class="caption" style="text-align:center">
                    <h4><a href="https://github.com/dathlin/OpcUaHelper" target="_blank">Core 项目</a></h4>
                </div>
            </div>
        </div>
    </div>
</div>

<br />
@await Component.InvokeAsync( "Division", new { description = "友情链接" } )
<div class="container">
    <div class="row">
        <div class="col-md-4">
            <span style="font-size:28px">IDE Environment</span>
            <ul>
                <li><a href="https://visualstudio.microsoft.com/zh-hans/">源代码及上述的Demo代码使用了 Visual Studio 2017 开发</a></li>
                <li><a href="http://www.jetbrains.com/idea/">Java部分的代码使用了 IntelliJ IDEA 开发</a></li>
                <li><a href="https://code.visualstudio.com/">当然，您也可以通过跨平台的 Visual Studio Code 开发</a></li>
                <li><a href="http://www.android-studio.org/">安卓部分的代码通过 android studio 开发</a></li>
            </ul>
        </div>
        <div class="col-md-4">
            <span style="font-size:28px">相关地址</span>
            <ul>
                <li><a href="https://github.com/dathlin/HslCommunication">源代码地址 : github</a></li>
                <li><a href="https://github.com/dathlin/HslCommunication/blob/master/LICENSE">Lisence: LGPL3.0 (商用免费)</a></li>
                <li><a href="https://www.nuget.org/packages/HslCommunication/">Nuget地址</a></li>
                <li><a href="http://www.cnblogs.com/dathlin/">博客地址</a></li>
                <li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/">C# 指南</a></li>
                <li><a href="https://docs.microsoft.com/zh-cn/dotnet/core/">.NET Core 指南</a></li>
                <li><a href="https://github.com/dathlin/OpcUaHelper">Opc Ua Helper库</a></li>
            </ul>
        </div>
        <div class="col-md-4">
            <span style="font-size:28px">博客主要文章</span>
            <ul>
                <li><a href="http://www.cnblogs.com/dathlin/p/7469679.html">三菱PLC的读写</a></li>
                <li><a href="http://www.cnblogs.com/dathlin/p/8685855.html">西门子PLC的读写</a></li>
                <li><a href="http://www.cnblogs.com/dathlin/p/8723961.html">欧姆龙PLC读写</a></li>
                <li><a href="http://www.cnblogs.com/dathlin/p/7885368.html">Modbus Tcp读写</a></li>
                <li><a href="http://www.cnblogs.com/dathlin/p/7782315.html">Modbus服务器开发</a></li>
                <li><a href="http://www.cnblogs.com/dathlin/p/7691693.html">日志记录功能</a></li>
                <li><a href="http://118.24.36.220:8080/html/c136d3de-eab7-9b0f-4bdf-d891297c8018.htm">其他API文档及代码示例</a></li>
            </ul>
        </div>
    </div>
</div>


<br />
@await Component.InvokeAsync( "Division", new { description = "合作伙伴" } )
<div class="container">
    <img src="https://raw.githubusercontent.com/dathlin/HslCommunication/master/imgs/partner/woody.png" alt="company">
    <img src="https://raw.githubusercontent.com/dathlin/HslCommunication/master/imgs/partner/均达电气.png" alt="company">
    <img src="https://raw.githubusercontent.com/dathlin/HslCommunication/master/imgs/partner/Pia.jpg" alt="company">
    <img src="https://raw.githubusercontent.com/dathlin/HslCommunication/master/imgs/partner/堤摩讯.png" alt="company">
    <img src="https://raw.githubusercontent.com/dathlin/HslCommunication/master/imgs/partner/盛意达.jpg" alt="company">
    <img src="https://raw.githubusercontent.com/dathlin/HslCommunication/master/imgs/partner/PENC.jpg" alt="company">
    <img src="https://raw.githubusercontent.com/dathlin/HslCommunication/master/imgs/partner/rocket_Blue.png" alt="company">
    <img src="https://raw.githubusercontent.com/dathlin/HslCommunication/master/imgs/partner/翔宇自控.jpg" alt="company">
</div>

<br />
@await Component.InvokeAsync( "Division", new { description = "日访问量统计" } )

<script src="~/js/echarts.common.min.js"></script>
<script src="~/js/jquery-1.12.4.min.js"></script>
<div id="main" class="container">
    <div id="main2" style="width: 800px;height:400px;"></div>
    <script type="text/javascript">
        $(window).ready(function () {
            $("#main2").css( "width", $("#main").width() + 'px');

            // 基于准备好的dom，初始化echarts实例
            var myChart = echarts.init(document.getElementById('main2'));
            // 指定图表的配置项和数据
            var option = {
                title: {
                    text: '网站日访问量统计'
                },
                tooltip: {},
                legend: {
                    data: ['次数']
                },
                xAxis: {
                    data: ['@Model.x_text[0]', '@Model.x_text[1]', '@Model.x_text[2]', '@Model.x_text[3]', '@Model.x_text[4]', '@Model.x_text[5]', '@Model.x_text[6]',
                        '@Model.x_text[7]', '@Model.x_text[8]', '@Model.x_text[9]', '@Model.x_text[10]', '@Model.x_text[11]', '@Model.x_text[12]', '@Model.x_text[13]',
                        '@Model.x_text[14]', '@Model.x_text[15]', '@Model.x_text[16]', '@Model.x_text[17]', '@Model.x_text[18]', '@Model.x_text[19]', '@Model.x_text[20]',
                        '@Model.x_text[21]', '@Model.x_text[22]', '@Model.x_text[23]', '@Model.x_text[24]', '@Model.x_text[25]', '@Model.x_text[26]', '@Model.x_text[27]',
                        '@Model.x_text[28]','@Model.x_text[29]'
                    ]
                },
                yAxis: {},
                series: [{
                    name: '次数',
                    type: 'bar',
                    data: [@Model.y_count[0],@Model.y_count[1],@Model.y_count[2],@Model.y_count[3],@Model.y_count[4],@Model.y_count[5],@Model.y_count[6],@Model.y_count[7],
                    @Model.y_count[8],@Model.y_count[9],@Model.y_count[10],@Model.y_count[11],@Model.y_count[12],@Model.y_count[13],@Model.y_count[14],@Model.y_count[15],
                    @Model.y_count[16],@Model.y_count[17],@Model.y_count[18],@Model.y_count[19],@Model.y_count[20],@Model.y_count[21],@Model.y_count[22],@Model.y_count[23],
                    @Model.y_count[24],@Model.y_count[25],@Model.y_count[26],@Model.y_count[27],@Model.y_count[28],@Model.y_count[29]]
                }]
            };

            // 使用刚指定的配置项和数据显示图表。
            myChart.setOption(option);

            $(window).resize(function () {
                $("#main2").css("width", $("#main").width() + 'px');
                myChart.resize();
            });
        })

    </script>
</div>

@section Scripts{

}